[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Placard
[DEBUG][2010-05-05 22:02:46]  Version select: select id_placard from goodfriend.placard where id_placard =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select placard_.id_placard, placard_.title as title0_, placard_.content as content0_, placard_.record_time as record4_0_, placard_.publish as publish0_ from goodfriend.placard placard_ where placard_.id_placard=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.placard (title, content, record_time, publish, id_placard) values (?, ?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.placard set title=?, content=?, record_time=?, publish=? where id_placard=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.placard where id_placard=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Statement
[DEBUG][2010-05-05 22:02:46]  Version select: select id from goodfriend.statement where id =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select statement_.id, statement_.item_id as item2_1_, statement_.content as content1_ from goodfriend.statement statement_ where statement_.id=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.statement (item_id, content, id) values (?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.statement set item_id=?, content=? where id=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.statement where id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Gossip
[DEBUG][2010-05-05 22:02:46]  Version select: select id_gossip from goodfriend.gossip where id_gossip =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select gossip_.id_gossip, gossip_.item_id as item2_2_, gossip_.from as from2_, gossip_.content as content2_ from goodfriend.gossip gossip_ where gossip_.id_gossip=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.gossip (item_id, from, content, id_gossip) values (?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.gossip set item_id=?, from=?, content=? where id_gossip=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.gossip where id_gossip=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:46]  Version select: select id_album from goodfriend.album where id_album =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select album_.id_album, album_.item_id as item2_4_, album_.title as title4_, album_.cover as cover4_, album_.description as descript5_4_ from goodfriend.album album_ where album_.id_album=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.album (item_id, title, cover, description, id_album) values (?, ?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.album set item_id=?, title=?, cover=?, description=? where id_album=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.album where id_album=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:46]  Version select: select id_item from goodfriend.item where id_item =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select item_.id_item, item_.user as user3_, item_.record_time as record3_3_ from goodfriend.item item_ where item_.id_item=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.item (user, record_time, id_item) values (?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.item set user=?, record_time=? where id_item=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.item where id_item=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Blog
[DEBUG][2010-05-05 22:02:46]  Version select: select id from goodfriend.blog where id =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select blog_.id, blog_.item_id as item2_5_, blog_.title as title5_, blog_.content as content5_ from goodfriend.blog blog_ where blog_.id=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.blog (item_id, title, content, id) values (?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.blog set item_id=?, title=?, content=? where id=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.blog where id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Picture
[DEBUG][2010-05-05 22:02:46]  Version select: select id from goodfriend.picture where id =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select picture_.id, picture_.album_id as album2_7_, picture_.item_id as item3_7_, picture_.introduction as introduc4_7_, picture_.path as path7_ from goodfriend.picture picture_ where picture_.id=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.picture (album_id, item_id, introduction, path, id) values (?, ?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.picture set album_id=?, item_id=?, introduction=?, path=? where id=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.picture where id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:46]  Version select: select id_user from goodfriend.user where id_user =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select user_.id_user, user_.user_name as user2_6_, user_.password as password6_, user_.real_name as real4_6_, user_.gender as gender6_, user_.birthday as birthday6_, user_.phone as phone6_, user_.email as email6_, user_.hoby as hoby6_, user_.photo as photo6_ from goodfriend.user user_ where user_.id_user=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.user (user_name, password, real_name, gender, birthday, phone, email, hoby, photo, id_user) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.user set user_name=?, password=?, real_name=?, gender=?, birthday=?, phone=?, email=?, hoby=?, photo=? where id_user=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.user where id_user=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Friends
[DEBUG][2010-05-05 22:02:46]  Version select: select id_friends from goodfriend.friends where id_friends =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select friends_.id_friends, friends_.friend_id as friend2_9_, friends_.user_id as user3_9_, friends_.success as success9_, friends_.group as group9_ from goodfriend.friends friends_ where friends_.id_friends=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.friends (friend_id, user_id, success, group, id_friends) values (?, ?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.friends set friend_id=?, user_id=?, success=?, group=? where id_friends=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.friends where id_friends=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Reply
[DEBUG][2010-05-05 22:02:46]  Version select: select id_reply from goodfriend.reply where id_reply =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select reply_.id_reply, reply_.item_id as item2_8_, reply_.from as from8_, reply_.content as content8_ from goodfriend.reply reply_ where reply_.id_reply=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.reply (item_id, from, content, id_reply) values (?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.reply set item_id=?, from=?, content=? where id_reply=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.reply where id_reply=?
[DEBUG][2010-05-05 22:02:46] Static SQL for entity: com.goodfriend.model.Admin
[DEBUG][2010-05-05 22:02:46]  Version select: select id_admin from goodfriend.admin where id_admin =?
[DEBUG][2010-05-05 22:02:46]  Snapshot select: select admin_.id_admin, admin_.username as username10_, admin_.password as password10_, admin_.real_name as real4_10_, admin_.phone as phone10_, admin_.email as email10_, admin_.address as address10_ from goodfriend.admin admin_ where admin_.id_admin=?
[DEBUG][2010-05-05 22:02:46]  Insert 0: insert into goodfriend.admin (username, password, real_name, phone, email, address, id_admin) values (?, ?, ?, ?, ?, ?, ?)
[DEBUG][2010-05-05 22:02:46]  Update 0: update goodfriend.admin set username=?, password=?, real_name=?, phone=?, email=?, address=? where id_admin=?
[DEBUG][2010-05-05 22:02:46]  Delete 0: delete from goodfriend.admin where id_admin=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.item set user=? where id_item=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.item set user=null where user=? and id_item=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.item set user=null where user=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.reply set from=? where id_reply=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.reply set from=null where from=? and id_reply=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.reply set from=null where from=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.picture set item_id=? where id=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.picture set item_id=null where item_id=? and id=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.picture set item_id=null where item_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.gossip set item_id=? where id_gossip=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.gossip set item_id=null where item_id=? and id_gossip=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.gossip set item_id=null where item_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.blog set item_id=? where id=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.blog set item_id=null where item_id=? and id=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.blog set item_id=null where item_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.gossip set from=? where id_gossip=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.gossip set from=null where from=? and id_gossip=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.gossip set from=null where from=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.album set item_id=? where id_album=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.album set item_id=null where item_id=? and id_album=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.album set item_id=null where item_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.statement set item_id=? where id=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.statement set item_id=null where item_id=? and id=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.statement set item_id=null where item_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.friends set friend_id=? where id_friends=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.friends set friend_id=null where friend_id=? and id_friends=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.friends set friend_id=null where friend_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Album.pictures
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.picture set album_id=? where id=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.picture set album_id=null where album_id=? and id=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.picture set album_id=null where album_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.reply set item_id=? where id_reply=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.reply set item_id=null where item_id=? and id_reply=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.reply set item_id=null where item_id=?
[DEBUG][2010-05-05 22:02:46] Static SQL for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:46]  Row insert: update goodfriend.friends set user_id=? where id_friends=?
[DEBUG][2010-05-05 22:02:46]  Row delete: update goodfriend.friends set user_id=null where user_id=? and id_friends=?
[DEBUG][2010-05-05 22:02:46]  One-shot delete: update goodfriend.friends set user_id=null where user_id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Placard: select placard0_.id_placard as id1_0_0_, placard0_.title as title0_0_, placard0_.content as content0_0_, placard0_.record_time as record4_0_0_, placard0_.publish as publish0_0_ from goodfriend.placard placard0_ where placard0_.id_placard=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Statement: select statement0_.id as id1_0_, statement0_.item_id as item2_1_0_, statement0_.content as content1_0_ from goodfriend.statement statement0_ where statement0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Statement: select statement0_.id as id1_0_, statement0_.item_id as item2_1_0_, statement0_.content as content1_0_ from goodfriend.statement statement0_ where statement0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Statement: select statement0_.id as id1_0_, statement0_.item_id as item2_1_0_, statement0_.content as content1_0_ from goodfriend.statement statement0_ where statement0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Statement: select statement0_.id as id1_0_, statement0_.item_id as item2_1_0_, statement0_.content as content1_0_ from goodfriend.statement statement0_ where statement0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Statement: select statement0_.id as id1_0_, statement0_.item_id as item2_1_0_, statement0_.content as content1_0_ from goodfriend.statement statement0_ where statement0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Statement: select statement0_.id as id1_3_, statement0_.item_id as item2_1_3_, statement0_.content as content1_3_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_5_, gossips3_.id_gossip as id1_5_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_ from goodfriend.statement statement0_ inner join goodfriend.item item1_ on statement0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id where statement0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Statement: select statement0_.id as id1_3_, statement0_.item_id as item2_1_3_, statement0_.content as content1_3_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_5_, gossips3_.id_gossip as id1_5_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_ from goodfriend.statement statement0_ inner join goodfriend.item item1_ on statement0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id where statement0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_0_, gossip0_.item_id as item2_2_0_, gossip0_.from as from2_0_, gossip0_.content as content2_0_ from goodfriend.gossip gossip0_ where gossip0_.id_gossip=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_0_, gossip0_.item_id as item2_2_0_, gossip0_.from as from2_0_, gossip0_.content as content2_0_ from goodfriend.gossip gossip0_ where gossip0_.id_gossip=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_0_, gossip0_.item_id as item2_2_0_, gossip0_.from as from2_0_, gossip0_.content as content2_0_ from goodfriend.gossip gossip0_ where gossip0_.id_gossip=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_0_, gossip0_.item_id as item2_2_0_, gossip0_.from as from2_0_, gossip0_.content as content2_0_ from goodfriend.gossip gossip0_ where gossip0_.id_gossip=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_0_, gossip0_.item_id as item2_2_0_, gossip0_.from as from2_0_, gossip0_.content as content2_0_ from goodfriend.gossip gossip0_ where gossip0_.id_gossip=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_4_, gossip0_.item_id as item2_2_4_, gossip0_.from as from2_4_, gossip0_.content as content2_4_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, pictures3_.item_id as item3_6_, pictures3_.id as id6_, pictures3_.id as id7_2_, pictures3_.album_id as album2_7_2_, pictures3_.item_id as item3_7_2_, pictures3_.introduction as introduc4_7_2_, pictures3_.path as path7_2_, user4_.id_user as id1_6_3_, user4_.user_name as user2_6_3_, user4_.password as password6_3_, user4_.real_name as real4_6_3_, user4_.gender as gender6_3_, user4_.birthday as birthday6_3_, user4_.phone as phone6_3_, user4_.email as email6_3_, user4_.hoby as hoby6_3_, user4_.photo as photo6_3_ from goodfriend.gossip gossip0_ inner join goodfriend.item item1_ on gossip0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.picture pictures3_ on item1_.id_item=pictures3_.item_id inner join goodfriend.user user4_ on gossip0_.from=user4_.id_user where gossip0_.id_gossip=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Gossip: select gossip0_.id_gossip as id1_2_4_, gossip0_.item_id as item2_2_4_, gossip0_.from as from2_4_, gossip0_.content as content2_4_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, pictures3_.item_id as item3_6_, pictures3_.id as id6_, pictures3_.id as id7_2_, pictures3_.album_id as album2_7_2_, pictures3_.item_id as item3_7_2_, pictures3_.introduction as introduc4_7_2_, pictures3_.path as path7_2_, user4_.id_user as id1_6_3_, user4_.user_name as user2_6_3_, user4_.password as password6_3_, user4_.real_name as real4_6_3_, user4_.gender as gender6_3_, user4_.birthday as birthday6_3_, user4_.phone as phone6_3_, user4_.email as email6_3_, user4_.hoby as hoby6_3_, user4_.photo as photo6_3_ from goodfriend.gossip gossip0_ inner join goodfriend.item item1_ on gossip0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.picture pictures3_ on item1_.id_item=pictures3_.item_id inner join goodfriend.user user4_ on gossip0_.from=user4_.id_user where gossip0_.id_gossip=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Item: select item0_.id_item as id1_3_0_, item0_.user as user3_0_, item0_.record_time as record3_3_0_ from goodfriend.item item0_ where item0_.id_item=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Item: select item0_.id_item as id1_3_0_, item0_.user as user3_0_, item0_.record_time as record3_3_0_ from goodfriend.item item0_ where item0_.id_item=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Item: select item0_.id_item as id1_3_0_, item0_.user as user3_0_, item0_.record_time as record3_3_0_ from goodfriend.item item0_ where item0_.id_item=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Item: select item0_.id_item as id1_3_0_, item0_.user as user3_0_, item0_.record_time as record3_3_0_ from goodfriend.item item0_ where item0_.id_item=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Item: select item0_.id_item as id1_3_0_, item0_.user as user3_0_, item0_.record_time as record3_3_0_ from goodfriend.item item0_ where item0_.id_item=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Item: select item0_.id_item as id1_3_2_, item0_.user as user3_2_, item0_.record_time as record3_3_2_, user1_.id_user as id1_6_0_, user1_.user_name as user2_6_0_, user1_.password as password6_0_, user1_.real_name as real4_6_0_, user1_.gender as gender6_0_, user1_.birthday as birthday6_0_, user1_.phone as phone6_0_, user1_.email as email6_0_, user1_.hoby as hoby6_0_, user1_.photo as photo6_0_, friends2_.friend_id as friend2_4_, friends2_.id_friends as id1_4_, friends2_.id_friends as id1_9_1_, friends2_.friend_id as friend2_9_1_, friends2_.user_id as user3_9_1_, friends2_.success as success9_1_, friends2_.group as group9_1_ from goodfriend.item item0_ inner join goodfriend.user user1_ on item0_.user=user1_.id_user left outer join goodfriend.friends friends2_ on user1_.id_user=friends2_.friend_id where item0_.id_item=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Item: select item0_.id_item as id1_3_2_, item0_.user as user3_2_, item0_.record_time as record3_3_2_, user1_.id_user as id1_6_0_, user1_.user_name as user2_6_0_, user1_.password as password6_0_, user1_.real_name as real4_6_0_, user1_.gender as gender6_0_, user1_.birthday as birthday6_0_, user1_.phone as phone6_0_, user1_.email as email6_0_, user1_.hoby as hoby6_0_, user1_.photo as photo6_0_, friends2_.friend_id as friend2_4_, friends2_.id_friends as id1_4_, friends2_.id_friends as id1_9_1_, friends2_.friend_id as friend2_9_1_, friends2_.user_id as user3_9_1_, friends2_.success as success9_1_, friends2_.group as group9_1_ from goodfriend.item item0_ inner join goodfriend.user user1_ on item0_.user=user1_.id_user left outer join goodfriend.friends friends2_ on user1_.id_user=friends2_.friend_id where item0_.id_item=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Album: select album0_.id_album as id1_4_0_, album0_.item_id as item2_4_0_, album0_.title as title4_0_, album0_.cover as cover4_0_, album0_.description as descript5_4_0_ from goodfriend.album album0_ where album0_.id_album=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Album: select album0_.id_album as id1_4_0_, album0_.item_id as item2_4_0_, album0_.title as title4_0_, album0_.cover as cover4_0_, album0_.description as descript5_4_0_ from goodfriend.album album0_ where album0_.id_album=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Album: select album0_.id_album as id1_4_0_, album0_.item_id as item2_4_0_, album0_.title as title4_0_, album0_.cover as cover4_0_, album0_.description as descript5_4_0_ from goodfriend.album album0_ where album0_.id_album=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Album: select album0_.id_album as id1_4_0_, album0_.item_id as item2_4_0_, album0_.title as title4_0_, album0_.cover as cover4_0_, album0_.description as descript5_4_0_ from goodfriend.album album0_ where album0_.id_album=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Album: select album0_.id_album as id1_4_0_, album0_.item_id as item2_4_0_, album0_.title as title4_0_, album0_.cover as cover4_0_, album0_.description as descript5_4_0_ from goodfriend.album album0_ where album0_.id_album=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Album: select album0_.id_album as id1_4_3_, album0_.item_id as item2_4_3_, album0_.title as title4_3_, album0_.cover as cover4_3_, album0_.description as descript5_4_3_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_5_, gossips3_.id_gossip as id1_5_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_ from goodfriend.album album0_ inner join goodfriend.item item1_ on album0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id where album0_.id_album=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Album: select album0_.id_album as id1_4_3_, album0_.item_id as item2_4_3_, album0_.title as title4_3_, album0_.cover as cover4_3_, album0_.description as descript5_4_3_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_5_, gossips3_.id_gossip as id1_5_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_ from goodfriend.album album0_ inner join goodfriend.item item1_ on album0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id where album0_.id_album=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Blog: select blog0_.id as id5_0_, blog0_.item_id as item2_5_0_, blog0_.title as title5_0_, blog0_.content as content5_0_ from goodfriend.blog blog0_ where blog0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Blog: select blog0_.id as id5_0_, blog0_.item_id as item2_5_0_, blog0_.title as title5_0_, blog0_.content as content5_0_ from goodfriend.blog blog0_ where blog0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Blog: select blog0_.id as id5_0_, blog0_.item_id as item2_5_0_, blog0_.title as title5_0_, blog0_.content as content5_0_ from goodfriend.blog blog0_ where blog0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Blog: select blog0_.id as id5_0_, blog0_.item_id as item2_5_0_, blog0_.title as title5_0_, blog0_.content as content5_0_ from goodfriend.blog blog0_ where blog0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Blog: select blog0_.id as id5_0_, blog0_.item_id as item2_5_0_, blog0_.title as title5_0_, blog0_.content as content5_0_ from goodfriend.blog blog0_ where blog0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Blog: select blog0_.id as id5_3_, blog0_.item_id as item2_5_3_, blog0_.title as title5_3_, blog0_.content as content5_3_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_5_, gossips3_.id_gossip as id1_5_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_ from goodfriend.blog blog0_ inner join goodfriend.item item1_ on blog0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id where blog0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Blog: select blog0_.id as id5_3_, blog0_.item_id as item2_5_3_, blog0_.title as title5_3_, blog0_.content as content5_3_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_5_, gossips3_.id_gossip as id1_5_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_ from goodfriend.blog blog0_ inner join goodfriend.item item1_ on blog0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id where blog0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.User: select user0_.id_user as id1_6_0_, user0_.user_name as user2_6_0_, user0_.password as password6_0_, user0_.real_name as real4_6_0_, user0_.gender as gender6_0_, user0_.birthday as birthday6_0_, user0_.phone as phone6_0_, user0_.email as email6_0_, user0_.hoby as hoby6_0_, user0_.photo as photo6_0_ from goodfriend.user user0_ where user0_.id_user=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.User: select user0_.id_user as id1_6_0_, user0_.user_name as user2_6_0_, user0_.password as password6_0_, user0_.real_name as real4_6_0_, user0_.gender as gender6_0_, user0_.birthday as birthday6_0_, user0_.phone as phone6_0_, user0_.email as email6_0_, user0_.hoby as hoby6_0_, user0_.photo as photo6_0_ from goodfriend.user user0_ where user0_.id_user=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.User: select user0_.id_user as id1_6_0_, user0_.user_name as user2_6_0_, user0_.password as password6_0_, user0_.real_name as real4_6_0_, user0_.gender as gender6_0_, user0_.birthday as birthday6_0_, user0_.phone as phone6_0_, user0_.email as email6_0_, user0_.hoby as hoby6_0_, user0_.photo as photo6_0_ from goodfriend.user user0_ where user0_.id_user=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.User: select user0_.id_user as id1_6_0_, user0_.user_name as user2_6_0_, user0_.password as password6_0_, user0_.real_name as real4_6_0_, user0_.gender as gender6_0_, user0_.birthday as birthday6_0_, user0_.phone as phone6_0_, user0_.email as email6_0_, user0_.hoby as hoby6_0_, user0_.photo as photo6_0_ from goodfriend.user user0_ where user0_.id_user=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.User: select user0_.id_user as id1_6_0_, user0_.user_name as user2_6_0_, user0_.password as password6_0_, user0_.real_name as real4_6_0_, user0_.gender as gender6_0_, user0_.birthday as birthday6_0_, user0_.phone as phone6_0_, user0_.email as email6_0_, user0_.hoby as hoby6_0_, user0_.photo as photo6_0_ from goodfriend.user user0_ where user0_.id_user=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.User: select user0_.id_user as id1_6_1_, user0_.user_name as user2_6_1_, user0_.password as password6_1_, user0_.real_name as real4_6_1_, user0_.gender as gender6_1_, user0_.birthday as birthday6_1_, user0_.phone as phone6_1_, user0_.email as email6_1_, user0_.hoby as hoby6_1_, user0_.photo as photo6_1_, items1_.user as user3_, items1_.id_item as id1_3_, items1_.id_item as id1_3_0_, items1_.user as user3_0_, items1_.record_time as record3_3_0_ from goodfriend.user user0_ left outer join goodfriend.item items1_ on user0_.id_user=items1_.user where user0_.id_user=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.User: select user0_.id_user as id1_6_1_, user0_.user_name as user2_6_1_, user0_.password as password6_1_, user0_.real_name as real4_6_1_, user0_.gender as gender6_1_, user0_.birthday as birthday6_1_, user0_.phone as phone6_1_, user0_.email as email6_1_, user0_.hoby as hoby6_1_, user0_.photo as photo6_1_, items1_.user as user3_, items1_.id_item as id1_3_, items1_.id_item as id1_3_0_, items1_.user as user3_0_, items1_.record_time as record3_3_0_ from goodfriend.user user0_ left outer join goodfriend.item items1_ on user0_.id_user=items1_.user where user0_.id_user=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Picture: select picture0_.id as id7_0_, picture0_.album_id as album2_7_0_, picture0_.item_id as item3_7_0_, picture0_.introduction as introduc4_7_0_, picture0_.path as path7_0_ from goodfriend.picture picture0_ where picture0_.id=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_0_, reply0_.item_id as item2_8_0_, reply0_.from as from8_0_, reply0_.content as content8_0_ from goodfriend.reply reply0_ where reply0_.id_reply=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_0_, reply0_.item_id as item2_8_0_, reply0_.from as from8_0_, reply0_.content as content8_0_ from goodfriend.reply reply0_ where reply0_.id_reply=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_0_, reply0_.item_id as item2_8_0_, reply0_.from as from8_0_, reply0_.content as content8_0_ from goodfriend.reply reply0_ where reply0_.id_reply=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_0_, reply0_.item_id as item2_8_0_, reply0_.from as from8_0_, reply0_.content as content8_0_ from goodfriend.reply reply0_ where reply0_.id_reply=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_0_, reply0_.item_id as item2_8_0_, reply0_.from as from8_0_, reply0_.content as content8_0_ from goodfriend.reply reply0_ where reply0_.id_reply=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_4_, reply0_.item_id as item2_8_4_, reply0_.from as from8_4_, reply0_.content as content8_4_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_6_, gossips3_.id_gossip as id1_6_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_, user4_.id_user as id1_6_3_, user4_.user_name as user2_6_3_, user4_.password as password6_3_, user4_.real_name as real4_6_3_, user4_.gender as gender6_3_, user4_.birthday as birthday6_3_, user4_.phone as phone6_3_, user4_.email as email6_3_, user4_.hoby as hoby6_3_, user4_.photo as photo6_3_ from goodfriend.reply reply0_ inner join goodfriend.item item1_ on reply0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id inner join goodfriend.user user4_ on reply0_.from=user4_.id_user where reply0_.id_reply=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Reply: select reply0_.id_reply as id1_8_4_, reply0_.item_id as item2_8_4_, reply0_.from as from8_4_, reply0_.content as content8_4_, item1_.id_item as id1_3_0_, item1_.user as user3_0_, item1_.record_time as record3_3_0_, user2_.id_user as id1_6_1_, user2_.user_name as user2_6_1_, user2_.password as password6_1_, user2_.real_name as real4_6_1_, user2_.gender as gender6_1_, user2_.birthday as birthday6_1_, user2_.phone as phone6_1_, user2_.email as email6_1_, user2_.hoby as hoby6_1_, user2_.photo as photo6_1_, gossips3_.item_id as item2_6_, gossips3_.id_gossip as id1_6_, gossips3_.id_gossip as id1_2_2_, gossips3_.item_id as item2_2_2_, gossips3_.from as from2_2_, gossips3_.content as content2_2_, user4_.id_user as id1_6_3_, user4_.user_name as user2_6_3_, user4_.password as password6_3_, user4_.real_name as real4_6_3_, user4_.gender as gender6_3_, user4_.birthday as birthday6_3_, user4_.phone as phone6_3_, user4_.email as email6_3_, user4_.hoby as hoby6_3_, user4_.photo as photo6_3_ from goodfriend.reply reply0_ inner join goodfriend.item item1_ on reply0_.item_id=item1_.id_item left outer join goodfriend.user user2_ on item1_.user=user2_.id_user left outer join goodfriend.gossip gossips3_ on item1_.id_item=gossips3_.item_id inner join goodfriend.user user4_ on reply0_.from=user4_.id_user where reply0_.id_reply=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_0_, friends0_.friend_id as friend2_9_0_, friends0_.user_id as user3_9_0_, friends0_.success as success9_0_, friends0_.group as group9_0_ from goodfriend.friends friends0_ where friends0_.id_friends=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_0_, friends0_.friend_id as friend2_9_0_, friends0_.user_id as user3_9_0_, friends0_.success as success9_0_, friends0_.group as group9_0_ from goodfriend.friends friends0_ where friends0_.id_friends=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_0_, friends0_.friend_id as friend2_9_0_, friends0_.user_id as user3_9_0_, friends0_.success as success9_0_, friends0_.group as group9_0_ from goodfriend.friends friends0_ where friends0_.id_friends=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_0_, friends0_.friend_id as friend2_9_0_, friends0_.user_id as user3_9_0_, friends0_.success as success9_0_, friends0_.group as group9_0_ from goodfriend.friends friends0_ where friends0_.id_friends=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_0_, friends0_.friend_id as friend2_9_0_, friends0_.user_id as user3_9_0_, friends0_.success as success9_0_, friends0_.group as group9_0_ from goodfriend.friends friends0_ where friends0_.id_friends=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_3_, friends0_.friend_id as friend2_9_3_, friends0_.user_id as user3_9_3_, friends0_.success as success9_3_, friends0_.group as group9_3_, user1_.id_user as id1_6_0_, user1_.user_name as user2_6_0_, user1_.password as password6_0_, user1_.real_name as real4_6_0_, user1_.gender as gender6_0_, user1_.birthday as birthday6_0_, user1_.phone as phone6_0_, user1_.email as email6_0_, user1_.hoby as hoby6_0_, user1_.photo as photo6_0_, items2_.user as user5_, items2_.id_item as id1_5_, items2_.id_item as id1_3_1_, items2_.user as user3_1_, items2_.record_time as record3_3_1_, user3_.id_user as id1_6_2_, user3_.user_name as user2_6_2_, user3_.password as password6_2_, user3_.real_name as real4_6_2_, user3_.gender as gender6_2_, user3_.birthday as birthday6_2_, user3_.phone as phone6_2_, user3_.email as email6_2_, user3_.hoby as hoby6_2_, user3_.photo as photo6_2_ from goodfriend.friends friends0_ inner join goodfriend.user user1_ on friends0_.friend_id=user1_.id_user left outer join goodfriend.item items2_ on user1_.id_user=items2_.user inner join goodfriend.user user3_ on friends0_.user_id=user3_.id_user where friends0_.id_friends=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Friends: select friends0_.id_friends as id1_9_3_, friends0_.friend_id as friend2_9_3_, friends0_.user_id as user3_9_3_, friends0_.success as success9_3_, friends0_.group as group9_3_, user1_.id_user as id1_6_0_, user1_.user_name as user2_6_0_, user1_.password as password6_0_, user1_.real_name as real4_6_0_, user1_.gender as gender6_0_, user1_.birthday as birthday6_0_, user1_.phone as phone6_0_, user1_.email as email6_0_, user1_.hoby as hoby6_0_, user1_.photo as photo6_0_, items2_.user as user5_, items2_.id_item as id1_5_, items2_.id_item as id1_3_1_, items2_.user as user3_1_, items2_.record_time as record3_3_1_, user3_.id_user as id1_6_2_, user3_.user_name as user2_6_2_, user3_.password as password6_2_, user3_.real_name as real4_6_2_, user3_.gender as gender6_2_, user3_.birthday as birthday6_2_, user3_.phone as phone6_2_, user3_.email as email6_2_, user3_.hoby as hoby6_2_, user3_.photo as photo6_2_ from goodfriend.friends friends0_ inner join goodfriend.user user1_ on friends0_.friend_id=user1_.id_user left outer join goodfriend.item items2_ on user1_.id_user=items2_.user inner join goodfriend.user user3_ on friends0_.user_id=user3_.id_user where friends0_.id_friends=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=?
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=? for update
[DEBUG][2010-05-05 22:02:46] Static select for entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=? for update
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_MERGE on entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=?
[DEBUG][2010-05-05 22:02:46] Static select for action ACTION_REFRESH on entity com.goodfriend.model.Admin: select admin0_.id_admin as id1_10_0_, admin0_.username as username10_0_, admin0_.password as password10_0_, admin0_.real_name as real4_10_0_, admin0_.phone as phone10_0_, admin0_.email as email10_0_, admin0_.address as address10_0_ from goodfriend.admin admin0_ where admin0_.id_admin=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.User.items: select items0_.user as user1_, items0_.id_item as id1_1_, items0_.id_item as id1_3_0_, items0_.user as user3_0_, items0_.record_time as record3_3_0_ from goodfriend.item items0_ where items0_.user=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Item.pictures: select pictures0_.item_id as item3_1_, pictures0_.id as id1_, pictures0_.id as id7_0_, pictures0_.album_id as album2_7_0_, pictures0_.item_id as item3_7_0_, pictures0_.introduction as introduc4_7_0_, pictures0_.path as path7_0_ from goodfriend.picture pictures0_ where pictures0_.item_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.User.replies: select replies0_.from as from1_, replies0_.id_reply as id1_1_, replies0_.id_reply as id1_8_0_, replies0_.item_id as item2_8_0_, replies0_.from as from8_0_, replies0_.content as content8_0_ from goodfriend.reply replies0_ where replies0_.from=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Item.gossips: select gossips0_.item_id as item2_1_, gossips0_.id_gossip as id1_1_, gossips0_.id_gossip as id1_2_0_, gossips0_.item_id as item2_2_0_, gossips0_.from as from2_0_, gossips0_.content as content2_0_ from goodfriend.gossip gossips0_ where gossips0_.item_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Item.blogs: select blogs0_.item_id as item2_1_, blogs0_.id as id1_, blogs0_.id as id5_0_, blogs0_.item_id as item2_5_0_, blogs0_.title as title5_0_, blogs0_.content as content5_0_ from goodfriend.blog blogs0_ where blogs0_.item_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Item.statements: select statements0_.item_id as item2_1_, statements0_.id as id1_, statements0_.id as id1_0_, statements0_.item_id as item2_1_0_, statements0_.content as content1_0_ from goodfriend.statement statements0_ where statements0_.item_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Item.albums: select albums0_.item_id as item2_1_, albums0_.id_album as id1_1_, albums0_.id_album as id1_4_0_, albums0_.item_id as item2_4_0_, albums0_.title as title4_0_, albums0_.cover as cover4_0_, albums0_.description as descript5_4_0_ from goodfriend.album albums0_ where albums0_.item_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.User.gossips: select gossips0_.from as from1_, gossips0_.id_gossip as id1_1_, gossips0_.id_gossip as id1_2_0_, gossips0_.item_id as item2_2_0_, gossips0_.from as from2_0_, gossips0_.content as content2_0_ from goodfriend.gossip gossips0_ where gossips0_.from=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.User.friends: select friends0_.friend_id as friend2_1_, friends0_.id_friends as id1_1_, friends0_.id_friends as id1_9_0_, friends0_.friend_id as friend2_9_0_, friends0_.user_id as user3_9_0_, friends0_.success as success9_0_, friends0_.group as group9_0_ from goodfriend.friends friends0_ where friends0_.friend_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Album.pictures: select pictures0_.album_id as album2_1_, pictures0_.id as id1_, pictures0_.id as id7_0_, pictures0_.album_id as album2_7_0_, pictures0_.item_id as item3_7_0_, pictures0_.introduction as introduc4_7_0_, pictures0_.path as path7_0_ from goodfriend.picture pictures0_ where pictures0_.album_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.Item.replies: select replies0_.item_id as item2_1_, replies0_.id_reply as id1_1_, replies0_.id_reply as id1_8_0_, replies0_.item_id as item2_8_0_, replies0_.from as from8_0_, replies0_.content as content8_0_ from goodfriend.reply replies0_ where replies0_.item_id=?
[DEBUG][2010-05-05 22:02:46] Static select for one-to-many com.goodfriend.model.User.friendsForOther: select friendsfor0_.user_id as user3_1_, friendsfor0_.id_friends as id1_1_, friendsfor0_.id_friends as id1_9_0_, friendsfor0_.friend_id as friend2_9_0_, friendsfor0_.user_id as user3_9_0_, friendsfor0_.success as success9_0_, friendsfor0_.group as group9_0_ from goodfriend.friends friendsfor0_ where friendsfor0_.user_id=?
[DEBUG][2010-05-05 22:02:46] initializing class SessionFactoryObjectFactory
[DEBUG][2010-05-05 22:02:46] registered: f5a76e1f2868c69a012868c69e8c0000 (unnamed)
[INFO ][2010-05-05 22:02:46] Not binding factory to JNDI, no JNDI name configured
[DEBUG][2010-05-05 22:02:46] instantiated session factory
[DEBUG][2010-05-05 22:02:46] Checking 0 named HQL queries
[DEBUG][2010-05-05 22:02:46] Checking 0 named SQL queries
[DEBUG][2010-05-05 22:02:46] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:46] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'transactionManager'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'transactionManager'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [org.springframework.orm.hibernate3.HibernateTransactionManager]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [org.springframework.orm.hibernate3.HibernateTransactionManager]
[DEBUG][2010-05-05 22:02:47] Found bean property 'autodetectDataSource' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'beanFactory' of type [org.springframework.beans.factory.BeanFactory]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'dataSource' of type [javax.sql.DataSource]
[DEBUG][2010-05-05 22:02:47] Found bean property 'defaultTimeout' of type [int]
[DEBUG][2010-05-05 22:02:47] Found bean property 'earlyFlushBeforeCommit' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'entityInterceptor' of type [org.hibernate.Interceptor]
[DEBUG][2010-05-05 22:02:47] Found bean property 'entityInterceptorBeanName' of type [java.lang.String]
[DEBUG][2010-05-05 22:02:47] Found bean property 'failEarlyOnGlobalRollbackOnly' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'globalRollbackOnParticipationFailure' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateManagedSession' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'jdbcExceptionTranslator' of type [org.springframework.jdbc.support.SQLExceptionTranslator]
[DEBUG][2010-05-05 22:02:47] Found bean property 'nestedTransactionAllowed' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'prepareConnection' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'resourceFactory' of type [java.lang.Object]
[DEBUG][2010-05-05 22:02:47] Found bean property 'rollbackOnCommitFailure' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Found bean property 'transactionSynchronization' of type [int]
[DEBUG][2010-05-05 22:02:47] Found bean property 'transactionSynchronizationName' of type [java.lang.String]
[DEBUG][2010-05-05 22:02:47] Found bean property 'validateExistingTransaction' of type [boolean]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'transactionManager'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'transactionManager'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'txAdvice'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'txAdvice'
[DEBUG][2010-05-05 22:02:47] Did not attempt to auto-proxy infrastructure class [org.springframework.transaction.interceptor.TransactionInterceptor]
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'txAdvice' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [org.springframework.transaction.interceptor.TransactionInterceptor]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [org.springframework.transaction.interceptor.TransactionInterceptor]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'transactionAttributeSource' of type [org.springframework.transaction.interceptor.TransactionAttributeSource]
[DEBUG][2010-05-05 22:02:47] Found bean property 'transactionAttributeSources' of type [[Lorg.springframework.transaction.interceptor.TransactionAttributeSource;]
[DEBUG][2010-05-05 22:02:47] Found bean property 'transactionAttributes' of type [java.util.Properties]
[DEBUG][2010-05-05 22:02:47] Found bean property 'transactionManager' of type [org.springframework.transaction.PlatformTransactionManager]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'transactionManager'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean '(inner bean)'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'nameMap' of type [java.util.Map]
[DEBUG][2010-05-05 22:02:47] Found bean property 'properties' of type [java.util.Properties]
[DEBUG][2010-05-05 22:02:47] Adding transactional method [add*] with attribute [PROPAGATION_REQUIRED,ISOLATION_DEFAULT]
[DEBUG][2010-05-05 22:02:47] Adding transactional method [del*] with attribute [PROPAGATION_REQUIRED,ISOLATION_DEFAULT]
[DEBUG][2010-05-05 22:02:47] Adding transactional method [update*] with attribute [PROPAGATION_REQUIRED,ISOLATION_DEFAULT]
[DEBUG][2010-05-05 22:02:47] Adding transactional method [*] with attribute [PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean '(inner bean)'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'txAdvice'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'txAdvice'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'placardDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'placardDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'placardDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.PlacardDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.PlacardDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'placardDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'placardDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'statementDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'statementDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'statementDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.StatementDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.StatementDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'statementDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'statementDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'gossipDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'gossipDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'gossipDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.GossipDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.GossipDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'gossipDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'gossipDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'itemDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'itemDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'itemDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.ItemDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.ItemDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'itemDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'itemDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'albumDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'albumDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'albumDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.AlbumDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.AlbumDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'albumDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'albumDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'blogDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'blogDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'blogDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.BlogDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.BlogDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'blogDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'blogDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'userDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'userDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'userDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.UserDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.UserDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'userDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'userDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'pictureDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'pictureDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'pictureDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.PictureDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.PictureDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'pictureDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'pictureDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'replyDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'replyDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'replyDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.ReplyDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.ReplyDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'replyDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'replyDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'friendsDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'friendsDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'friendsDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.FriendsDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.FriendsDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'friendsDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'friendsDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'adminDAO'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'adminDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'adminDAO' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.dao.impl.AdminDAO]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.dao.impl.AdminDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'hibernateTemplate' of type [org.springframework.orm.hibernate3.HibernateTemplate]
[DEBUG][2010-05-05 22:02:47] Found bean property 'sessionFactory' of type [org.hibernate.SessionFactory]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'sessionFactory'
[DEBUG][2010-05-05 22:02:47] Invoking afterPropertiesSet() on bean with name 'adminDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Finished creating instance of bean 'adminDAO'
[DEBUG][2010-05-05 22:02:47] Creating shared instance of singleton bean 'userDaoManager'
[DEBUG][2010-05-05 22:02:47] Creating instance of bean 'userDaoManager'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Eagerly caching bean 'userDaoManager' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:47] Getting BeanInfo for class [com.goodfriend.daomanager.impl.UserDaoManager]
[DEBUG][2010-05-05 22:02:47] Caching PropertyDescriptors for class [com.goodfriend.daomanager.impl.UserDaoManager]
[DEBUG][2010-05-05 22:02:47] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:47] Found bean property 'userDao' of type [com.goodfriend.dao.IUserDAO]
[DEBUG][2010-05-05 22:02:47] Found bean property 'users' of type [java.util.List]
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'userDAO'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:47] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'txAdvice'
[DEBUG][2010-05-05 22:02:48] Creating [java.util.concurrent.ConcurrentHashMap]
[DEBUG][2010-05-05 22:02:48] Creating implicit proxy for bean 'userDaoManager' with 0 common interceptors and 2 specific interceptors
[DEBUG][2010-05-05 22:02:48] Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.goodfriend.daomanager.impl.UserDaoManager@6c2896]
[DEBUG][2010-05-05 22:02:48] Finished creating instance of bean 'userDaoManager'
[DEBUG][2010-05-05 22:02:48] Creating shared instance of singleton bean 'albumDaoManager'
[DEBUG][2010-05-05 22:02:48] Creating instance of bean 'albumDaoManager'
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:48] Eagerly caching bean 'albumDaoManager' to allow for resolving potential circular references
[DEBUG][2010-05-05 22:02:48] Getting BeanInfo for class [com.goodfriend.daomanager.impl.AlbumDaoManager]
[DEBUG][2010-05-05 22:02:48] Caching PropertyDescriptors for class [com.goodfriend.daomanager.impl.AlbumDaoManager]
[DEBUG][2010-05-05 22:02:48] Found bean property 'albumDao' of type [com.goodfriend.dao.IAlbumDAO]
[DEBUG][2010-05-05 22:02:48] Found bean property 'allAlbums' of type [java.util.List]
[DEBUG][2010-05-05 22:02:48] Found bean property 'class' of type [java.lang.Class]
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'albumDAO'
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0'
[DEBUG][2010-05-05 22:02:48] Finished creating instance of bean 'albumDaoManager'
[DEBUG][2010-05-05 22:02:48] Publishing event in context [org.springframework.context.support.ClassPathXmlApplicationContext@bb0d0d]: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@bb0d0d: display name [org.springframework.context.support.ClassPathXmlApplicationContext@bb0d0d]; startup date [Wed May 05 22:02:41 CST 2010]; root of context hierarchy]
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'albumDaoManager'
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'userDaoManager'
[DEBUG][2010-05-05 22:02:48] Returning cached instance of singleton bean 'itemDAO'
[DEBUG][2010-05-05 22:02:48] Creating new transaction with name [com.goodfriend.daomanager.IUserDaoManager.getUser]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly
[DEBUG][2010-05-05 22:02:48] opened session at timestamp: 12730681682
[DEBUG][2010-05-05 22:02:48] Opened new Session [org.hibernate.impl.SessionImpl@5bd978] for Hibernate transaction
[DEBUG][2010-05-05 22:02:48] Preparing JDBC Connection of Hibernate Session [org.hibernate.impl.SessionImpl@5bd978]
[DEBUG][2010-05-05 22:02:48] opening JDBC connection
[DEBUG][2010-05-05 22:02:48] total checked-out connections: 0
[DEBUG][2010-05-05 22:02:48] using pooled JDBC connection, pool size: 0
[DEBUG][2010-05-05 22:02:48] Setting JDBC Connection [com.mysql.jdbc.Connection@acbd3a] read-only
[DEBUG][2010-05-05 22:02:48] setting flush mode to: NEVER
[DEBUG][2010-05-05 22:02:48] begin
[DEBUG][2010-05-05 22:02:48] current autocommit status: false
[DEBUG][2010-05-05 22:02:48] after transaction begin
[DEBUG][2010-05-05 22:02:48] Bound value [org.springframework.orm.hibernate3.SessionHolder@11d2066] for key [org.hibernate.impl.SessionFactoryImpl@1be1041] to thread [main]
[DEBUG][2010-05-05 22:02:48] Initializing transaction synchronization
[DEBUG][2010-05-05 22:02:48] Getting transaction for [com.goodfriend.daomanager.IUserDaoManager.getUser]
[DEBUG][2010-05-05 22:02:48] getting User instance with id: 1
[DEBUG][2010-05-05 22:02:48] Retrieved value [org.springframework.orm.hibernate3.SessionHolder@11d2066] for key [org.hibernate.impl.SessionFactoryImpl@1be1041] bound to thread [main]
[DEBUG][2010-05-05 22:02:48] Retrieved value [org.springframework.orm.hibernate3.SessionHolder@11d2066] for key [org.hibernate.impl.SessionFactoryImpl@1be1041] bound to thread [main]
[DEBUG][2010-05-05 22:02:48] Found thread-bound Session for HibernateTemplate
[DEBUG][2010-05-05 22:02:48] loading entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] attempting to resolve: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] object not resolved in any cache: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] Fetching entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] loading entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] select user0_.id_user as id1_6_0_, user0_.user_name as user2_6_0_, user0_.password as password6_0_, user0_.real_name as real4_6_0_, user0_.gender as gender6_0_, user0_.birthday as birthday6_0_, user0_.phone as phone6_0_, user0_.email as email6_0_, user0_.hoby as hoby6_0_, user0_.photo as photo6_0_ from goodfriend.user user0_ where user0_.id_user=?
[DEBUG][2010-05-05 22:02:48] preparing statement
[DEBUG][2010-05-05 22:02:48] binding '1' to parameter: 1
[DEBUG][2010-05-05 22:02:48] about to open ResultSet (open ResultSets: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] processing result set
[DEBUG][2010-05-05 22:02:48] result set row: 0
[DEBUG][2010-05-05 22:02:48] result row: EntityKey[com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] Initializing object from ResultSet: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] Hydrating entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] returning 'xurunhua' as column: user2_6_0_
[DEBUG][2010-05-05 22:02:48] returning 'xurunhua' as column: password6_0_
[DEBUG][2010-05-05 22:02:48] returning 'xurunhua' as column: real4_6_0_
[DEBUG][2010-05-05 22:02:48] returning null as column: gender6_0_
[DEBUG][2010-05-05 22:02:48] returning null as column: birthday6_0_
[DEBUG][2010-05-05 22:02:48] returning null as column: phone6_0_
[DEBUG][2010-05-05 22:02:48] returning null as column: email6_0_
[DEBUG][2010-05-05 22:02:48] returning null as column: hoby6_0_
[DEBUG][2010-05-05 22:02:48] returning null as column: photo6_0_
[DEBUG][2010-05-05 22:02:48] done processing result set (1 rows)
[DEBUG][2010-05-05 22:02:48] about to close ResultSet (open ResultSets: 1, globally: 1)
[DEBUG][2010-05-05 22:02:48] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
[DEBUG][2010-05-05 22:02:48] closing statement
[DEBUG][2010-05-05 22:02:48] total objects hydrated: 1
[DEBUG][2010-05-05 22:02:48] resolving associations for [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] creating collection wrapper:[com.goodfriend.model.User.items#1]
[DEBUG][2010-05-05 22:02:48] creating collection wrapper:[com.goodfriend.model.User.friends#1]
[DEBUG][2010-05-05 22:02:48] creating collection wrapper:[com.goodfriend.model.User.replies#1]
[DEBUG][2010-05-05 22:02:48] creating collection wrapper:[com.goodfriend.model.User.friendsForOther#1]
[DEBUG][2010-05-05 22:02:48] creating collection wrapper:[com.goodfriend.model.User.gossips#1]
[DEBUG][2010-05-05 22:02:48] done materializing entity [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] initializing non-lazy collections
[DEBUG][2010-05-05 22:02:48] done entity load
[DEBUG][2010-05-05 22:02:48] Not closing pre-bound Hibernate Session after HibernateTemplate
[DEBUG][2010-05-05 22:02:48] Completing transaction for [com.goodfriend.daomanager.IUserDaoManager.getUser]
[DEBUG][2010-05-05 22:02:48] Triggering beforeCommit synchronization
[DEBUG][2010-05-05 22:02:48] Triggering beforeCompletion synchronization
[DEBUG][2010-05-05 22:02:48] Initiating transaction commit
[DEBUG][2010-05-05 22:02:48] Committing Hibernate transaction on Session [org.hibernate.impl.SessionImpl@5bd978]
[DEBUG][2010-05-05 22:02:48] commit
[DEBUG][2010-05-05 22:02:48] before transaction completion
[DEBUG][2010-05-05 22:02:48] before transaction completion
[DEBUG][2010-05-05 22:02:48] committed JDBC Connection
[DEBUG][2010-05-05 22:02:48] after transaction completion
[DEBUG][2010-05-05 22:02:48] transaction completed on session with on_close connection release mode; be sure to close the session to release JDBC resources!
[DEBUG][2010-05-05 22:02:48] after transaction completion
[DEBUG][2010-05-05 22:02:48] Triggering afterCommit synchronization
[DEBUG][2010-05-05 22:02:48] Triggering afterCompletion synchronization
[DEBUG][2010-05-05 22:02:48] Clearing transaction synchronization
[DEBUG][2010-05-05 22:02:48] Removed value [org.springframework.orm.hibernate3.SessionHolder@11d2066] for key [org.hibernate.impl.SessionFactoryImpl@1be1041] from thread [main]
[DEBUG][2010-05-05 22:02:48] Resetting read-only flag of JDBC Connection [com.mysql.jdbc.Connection@acbd3a]
[DEBUG][2010-05-05 22:02:48] Closing Hibernate Session [org.hibernate.impl.SessionImpl@5bd978] after transaction
[DEBUG][2010-05-05 22:02:48] Closing Hibernate Session
[DEBUG][2010-05-05 22:02:48] closing session
[DEBUG][2010-05-05 22:02:48] performing cleanup
[DEBUG][2010-05-05 22:02:48] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
[DEBUG][2010-05-05 22:02:48] returning connection to pool, pool size: 1
[DEBUG][2010-05-05 22:02:48] after transaction completion
[DEBUG][2010-05-05 22:02:48] transaction completed on session with on_close connection release mode; be sure to close the session to release JDBC resources!
[DEBUG][2010-05-05 22:02:48] after transaction completion
[DEBUG][2010-05-05 22:02:48] saving Item instance
[DEBUG][2010-05-05 22:02:48] Opening Hibernate Session
[DEBUG][2010-05-05 22:02:48] opened session at timestamp: 12730681684
[DEBUG][2010-05-05 22:02:48] saving transient instance
[DEBUG][2010-05-05 22:02:48] fetching initial value: select max(id_item) from item
[DEBUG][2010-05-05 22:02:48] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] opening JDBC connection
[DEBUG][2010-05-05 22:02:48] total checked-out connections: 0
[DEBUG][2010-05-05 22:02:48] using pooled JDBC connection, pool size: 0
[DEBUG][2010-05-05 22:02:48] select max(id_item) from item
[DEBUG][2010-05-05 22:02:48] preparing statement
[DEBUG][2010-05-05 22:02:48] first free id: 2
[DEBUG][2010-05-05 22:02:48] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
[DEBUG][2010-05-05 22:02:48] closing statement
[DEBUG][2010-05-05 22:02:48] generated identifier: 2, using strategy: org.hibernate.id.IncrementGenerator
[DEBUG][2010-05-05 22:02:48] saving [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] cascading to saveOrUpdate: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] id unsaved-value: null
[DEBUG][2010-05-05 22:02:48] detached instance of: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] updating detached instance
[DEBUG][2010-05-05 22:02:48] updating [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] updating [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] Eagerly flushing Hibernate session
[DEBUG][2010-05-05 22:02:48] flushing session
[DEBUG][2010-05-05 22:02:48] processing flush-time cascades
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] cascading to saveOrUpdate: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] persistent instance of: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] ignoring persistent instance
[DEBUG][2010-05-05 22:02:48] object already associated with session: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] dirty checking collections
[DEBUG][2010-05-05 22:02:48] Flushing entities and processing referenced collections
[DEBUG][2010-05-05 22:02:48] Updating entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.items#1], was: [com.goodfriend.model.User.items#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.friends#1], was: [com.goodfriend.model.User.friends#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.replies#1], was: [com.goodfriend.model.User.replies#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.friendsForOther#1], was: [com.goodfriend.model.User.friendsForOther#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.gossips#1], was: [com.goodfriend.model.User.gossips#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.gossips#2], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.pictures#2], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.statements#2], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.blogs#2], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.replies#2], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.albums#2], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Processing unreferenced collections
[DEBUG][2010-05-05 22:02:48] Scheduling collection removes/(re)creates/updates
[DEBUG][2010-05-05 22:02:48] Flushed: 1 insertions, 1 updates, 0 deletions to 2 objects
[DEBUG][2010-05-05 22:02:48] Flushed: 6 (re)creations, 0 updates, 0 removals to 11 collections
[DEBUG][2010-05-05 22:02:48] listing entities:
[DEBUG][2010-05-05 22:02:48] com.goodfriend.model.User{friendsForOther=<uninitialized>, birthday=null, phone=null, password=xurunhua, photo=null, friends=<uninitialized>, email=null, items=<uninitialized>, replies=<uninitialized>, idUser=1, userName=xurunhua, gender=null, gossips=<uninitialized>, realName=xurunhua, hoby=null}
[DEBUG][2010-05-05 22:02:48] com.goodfriend.model.Item{replies=[], albums=[], statements=[], idItem=2, pictures=[], gossips=[], recordTime=2010-05-05 22:02:48, user=com.goodfriend.model.User#1, blogs=[]}
[DEBUG][2010-05-05 22:02:48] executing flush
[DEBUG][2010-05-05 22:02:48] registering flush begin
[DEBUG][2010-05-05 22:02:48] Inserting entity: [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] insert into goodfriend.item (user, record_time, id_item) values (?, ?, ?)
[DEBUG][2010-05-05 22:02:48] preparing statement
[DEBUG][2010-05-05 22:02:48] Dehydrating entity: [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] binding '1' to parameter: 1
[DEBUG][2010-05-05 22:02:48] binding '2010-05-05 22:02:48' to parameter: 2
[DEBUG][2010-05-05 22:02:48] binding '2' to parameter: 3
[DEBUG][2010-05-05 22:02:48] Executing batch size: 1
[DEBUG][2010-05-05 22:02:48] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
[DEBUG][2010-05-05 22:02:48] closing statement
[DEBUG][2010-05-05 22:02:48] Updating entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] update goodfriend.user set user_name=?, password=?, real_name=?, gender=?, birthday=?, phone=?, email=?, hoby=?, photo=? where id_user=?
[DEBUG][2010-05-05 22:02:48] preparing statement
[DEBUG][2010-05-05 22:02:48] Dehydrating entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] binding 'xurunhua' to parameter: 1
[DEBUG][2010-05-05 22:02:48] binding 'xurunhua' to parameter: 2
[DEBUG][2010-05-05 22:02:48] binding 'xurunhua' to parameter: 3
[DEBUG][2010-05-05 22:02:48] binding null to parameter: 4
[DEBUG][2010-05-05 22:02:48] binding null to parameter: 5
[DEBUG][2010-05-05 22:02:48] binding null to parameter: 6
[DEBUG][2010-05-05 22:02:48] binding null to parameter: 7
[DEBUG][2010-05-05 22:02:48] binding null to parameter: 8
[DEBUG][2010-05-05 22:02:48] binding null to parameter: 9
[DEBUG][2010-05-05 22:02:48] binding '1' to parameter: 10
[DEBUG][2010-05-05 22:02:48] Executing batch size: 1
[DEBUG][2010-05-05 22:02:48] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
[DEBUG][2010-05-05 22:02:48] closing statement
[DEBUG][2010-05-05 22:02:48] registering flush end
[DEBUG][2010-05-05 22:02:48] post flush
[DEBUG][2010-05-05 22:02:48] Closing Hibernate Session
[DEBUG][2010-05-05 22:02:48] closing session
[DEBUG][2010-05-05 22:02:48] performing cleanup
[DEBUG][2010-05-05 22:02:48] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
[DEBUG][2010-05-05 22:02:48] returning connection to pool, pool size: 1
[DEBUG][2010-05-05 22:02:48] after transaction completion
[DEBUG][2010-05-05 22:02:48] transaction completed on session with on_close connection release mode; be sure to close the session to release JDBC resources!
[DEBUG][2010-05-05 22:02:48] after transaction completion
[DEBUG][2010-05-05 22:02:48] save successful
[DEBUG][2010-05-05 22:02:48] saving Album instance
[DEBUG][2010-05-05 22:02:48] Opening Hibernate Session
[DEBUG][2010-05-05 22:02:48] opened session at timestamp: 12730681686
[DEBUG][2010-05-05 22:02:48] begin
[DEBUG][2010-05-05 22:02:48] opening JDBC connection
[DEBUG][2010-05-05 22:02:48] total checked-out connections: 0
[DEBUG][2010-05-05 22:02:48] using pooled JDBC connection, pool size: 0
[DEBUG][2010-05-05 22:02:48] current autocommit status: false
[DEBUG][2010-05-05 22:02:48] after transaction begin
[DEBUG][2010-05-05 22:02:48] Opening Hibernate Session
[DEBUG][2010-05-05 22:02:48] opened session at timestamp: 12730681686
[DEBUG][2010-05-05 22:02:48] saving transient instance
[DEBUG][2010-05-05 22:02:48] fetching initial value: select max(id_album) from album
[DEBUG][2010-05-05 22:02:48] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] opening JDBC connection
[DEBUG][2010-05-05 22:02:48] total checked-out connections: 1
[DEBUG][2010-05-05 22:02:48] opening new JDBC connection
[DEBUG][2010-05-05 22:02:48] created connection to: jdbc:mysql://localhost:3306/goodfriend, Isolation Level: 4
[DEBUG][2010-05-05 22:02:48] select max(id_album) from album
[DEBUG][2010-05-05 22:02:48] preparing statement
[DEBUG][2010-05-05 22:02:48] first free id: 8
[DEBUG][2010-05-05 22:02:48] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
[DEBUG][2010-05-05 22:02:48] closing statement
[DEBUG][2010-05-05 22:02:48] generated identifier: 8, using strategy: org.hibernate.id.IncrementGenerator
[DEBUG][2010-05-05 22:02:48] saving [com.goodfriend.model.Album#8]
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:48] cascading to saveOrUpdate: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] id unsaved-value: null
[DEBUG][2010-05-05 22:02:48] detached instance of: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] updating detached instance
[DEBUG][2010-05-05 22:02:48] updating [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] updating [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] cascading to saveOrUpdate: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] id unsaved-value: null
[DEBUG][2010-05-05 22:02:48] detached instance of: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] updating detached instance
[DEBUG][2010-05-05 22:02:48] updating [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] updating [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:48] Wrapped collection in role: com.goodfriend.model.Album.pictures
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Album.pictures
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Album.pictures
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:48] Eagerly flushing Hibernate session
[DEBUG][2010-05-05 22:02:48] flushing session
[DEBUG][2010-05-05 22:02:48] processing flush-time cascades
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] cascading to saveOrUpdate: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] persistent instance of: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] ignoring persistent instance
[DEBUG][2010-05-05 22:02:48] object already associated with session: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.gossips
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.pictures
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.statements
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.blogs
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Item.albums
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.items
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friends
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.replies
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.friendsForOther
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.User.gossips
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.User
[DEBUG][2010-05-05 22:02:48] processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:48] cascading to saveOrUpdate: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] persistent instance of: com.goodfriend.model.Item
[DEBUG][2010-05-05 22:02:48] ignoring persistent instance
[DEBUG][2010-05-05 22:02:48] object already associated with session: [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Album.pictures
[DEBUG][2010-05-05 22:02:48] done cascade ACTION_SAVE_UPDATE for collection: com.goodfriend.model.Album.pictures
[DEBUG][2010-05-05 22:02:48] done processing cascade ACTION_SAVE_UPDATE for: com.goodfriend.model.Album
[DEBUG][2010-05-05 22:02:48] dirty checking collections
[DEBUG][2010-05-05 22:02:48] Flushing entities and processing referenced collections
[DEBUG][2010-05-05 22:02:48] Updating entity: [com.goodfriend.model.Item#2]
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.gossips#2], was: [com.goodfriend.model.Item.gossips#2] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.pictures#2], was: [com.goodfriend.model.Item.pictures#2] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.statements#2], was: [com.goodfriend.model.Item.statements#2] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.blogs#2], was: [com.goodfriend.model.Item.blogs#2] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.replies#2], was: [com.goodfriend.model.Item.replies#2] (initialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Item.albums#2], was: [com.goodfriend.model.Item.albums#2] (initialized)
[DEBUG][2010-05-05 22:02:48] Updating entity: [com.goodfriend.model.User#1]
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.items#1], was: [com.goodfriend.model.User.items#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.friends#1], was: [com.goodfriend.model.User.friends#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.replies#1], was: [com.goodfriend.model.User.replies#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.friendsForOther#1], was: [com.goodfriend.model.User.friendsForOther#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.User.gossips#1], was: [com.goodfriend.model.User.gossips#1] (uninitialized)
[DEBUG][2010-05-05 22:02:48] Collection found: [com.goodfriend.model.Album.pictures#8], was: [<unreferenced>] (initialized)
[DEBUG][2010-05-05 22:02:48] Processing unreferenced collections
[DEBUG][2010-05-05 22:02:48] Scheduling collection removes/(re)creates/updates
[DEBUG][2010-05-05 22:02:48] Flushed: 1 insertions, 2 updates, 0 deletions to 3 objects
[DEBUG][2010-05-05 22:02:48] Flushed: 1 (re)creations, 0 updates, 0 removals to 12 collections
[DEBUG][2010-05-05 22:02:48] listing entities:
[DEBUG][2010-05-05 22:02:48] com.goodfriend.model.Album{cover=tty, title=null, idAlbum=8, description=null, item=com.goodfriend.model.Item#2, pictures=[]}
[DEBUG][2010-05-05 22:02:48] com.goodfriend.model.User{friendsForOther=<uninitialized>, birthday=null, phone=null, password=xurunhua, photo=null, friends=<uninitialized>, email=null, items=<uninitialized>, replies=<uninitialized>, idUser=1, userName=xurunhua, gender=null, gossips=<uninitialized>, realName=xurunhua, hoby=null}
[DEBUG][2010-05-05 22:02:48] com.goodfriend.model.Item{replies=[], albums=[], statements=[], idItem=2, pictures=[], gossips=[], recordTime=2010-05-05 22:02:48, user=com.goodfriend.model.User#1, blogs=[]}
[DEBUG][2010-05-05 22:02:48] executing flush
[DEBUG][2010-05-05 22:02:48] registering flush begin
[DEBUG][2010-05-05 22:02:48] Inserting entity: [com.goodfriend.model.Album#8]
[DEBUG][2010-05-05 22:02:48] about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
[DEBUG][2010-05-05 22:02:48] insert into goodfriend.album (item_id, cover, id_album) values (?, ?, ?)
[DEBUG][2010-05-05 22:02:48] preparing statement
[DEBUG][2010-05-05 22:02:48] Dehydrating entity: [com.goodfriend.model.Album#8]
[DEBUG][2010-05-05 22:02:48] binding '2' to parameter: 1
[DEBUG][2010-05-05 22:02:48] binding 'tty' to parameter: 2
[DEBUG][2010-05-05 22:02:48] binding '8' to parameter: 3
[DEBUG][2010-05-05 22:02:48] Executing batch size: 1
[DEBUG][2010-05-05 22:03:39] about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
[DEBUG][2010-05-05 22:03:39] closing statement
[DEBUG][2010-05-05 22:03:39] Could not execute JDBC batch update [insert into goodfriend.album (item_id, cover, id_album) values (?, ?, ?)]
java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1269)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:955)
	at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)
	at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:247)
	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:266)
	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:167)
	at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)
	at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)
	at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1001)
	at org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:390)
	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:420)
	at org.springframework.orm.hibernate3.HibernateTemplate.executeWithNativeSession(HibernateTemplate.java:374)
	at org.springframework.orm.hibernate3.HibernateTemplate.save(HibernateTemplate.java:694)
	at com.goodfriend.dao.impl.AlbumDAO.save(AlbumDAO.java:39)
	at com.goodfriend.daomanager.impl.AlbumDaoManager.addAlbum(AlbumDaoManager.java:18)
	at com.goodfriend.daomanager.test.AlbumDaoManagerTest.testAddAlbum(AlbumDaoManagerTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
[WARN ][2010-05-05 22:03:39] SQL Error: 1205, SQLState: 41000
[ERROR][2010-05-05 22:03:39] Lock wait timeout exceeded; try restarting transaction
[ERROR][2010-05-05 22:03:39] Could not synchronize database state with session
org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update
	at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103)
	at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91)
	at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
	at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:254)
	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:266)
	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:167)
	at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)
	at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)
	at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1001)
	at org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:390)
	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:420)
	at org.springframework.orm.hibernate3.HibernateTemplate.executeWithNativeSession(HibernateTemplate.java:374)
	at org.springframework.orm.hibernate3.HibernateTemplate.save(HibernateTemplate.java:694)
	at com.goodfriend.dao.impl.AlbumDAO.save(AlbumDAO.java:39)
	at com.goodfriend.daomanager.impl.AlbumDaoManager.addAlbum(AlbumDaoManager.java:18)
	at com.goodfriend.daomanager.test.AlbumDaoManagerTest.testAddAlbum(AlbumDaoManagerTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1269)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:955)
	at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)
	at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:247)
	... 36 more
[DEBUG][2010-05-05 22:03:39] registering flush end
[DEBUG][2010-05-05 22:03:39] Extracted SQL state class '41' from value '41000'
[DEBUG][2010-05-05 22:03:39] Closing Hibernate Session
[DEBUG][2010-05-05 22:03:39] closing session
[DEBUG][2010-05-05 22:03:39] performing cleanup
[DEBUG][2010-05-05 22:03:39] releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
[DEBUG][2010-05-05 22:03:39] returning connection to pool, pool size: 1
[DEBUG][2010-05-05 22:03:39] after transaction completion
[DEBUG][2010-05-05 22:03:39] transaction completed on session with on_close connection release mode; be sure to close the session to release JDBC resources!
[DEBUG][2010-05-05 22:03:39] after transaction completion
[ERROR][2010-05-05 22:03:39] save failed
org.springframework.jdbc.UncategorizedSQLException: Hibernate operation: Could not execute JDBC batch update; uncategorized SQLException for SQL [insert into goodfriend.album (item_id, cover, id_album) values (?, ?, ?)]; SQL state [41000]; error code [1205]; Lock wait timeout exceeded; try restarting transaction; nested exception is java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83)
	at org.springframework.orm.hibernate3.HibernateAccessor.convertJdbcAccessException(HibernateAccessor.java:424)
	at org.springframework.orm.hibernate3.HibernateAccessor.convertHibernateAccessException(HibernateAccessor.java:410)
	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:424)
	at org.springframework.orm.hibernate3.HibernateTemplate.executeWithNativeSession(HibernateTemplate.java:374)
	at org.springframework.orm.hibernate3.HibernateTemplate.save(HibernateTemplate.java:694)
	at com.goodfriend.dao.impl.AlbumDAO.save(AlbumDAO.java:39)
	at com.goodfriend.daomanager.impl.AlbumDaoManager.addAlbum(AlbumDaoManager.java:18)
	at com.goodfriend.daomanager.test.AlbumDaoManagerTest.testAddAlbum(AlbumDaoManagerTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1269)
	at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:955)
	at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)
	at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:247)
	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:266)
	at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:167)
	at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)
	at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)
	at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1001)
	at org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:390)
	at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:420)
	... 29 more
[INFO ][2010-05-05 22:05:00] Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@d9660d: display name [org.springframework.context.support.ClassPathXmlApplicationContext@d9660d]; startup date [Wed May 05 22:05:00 CST 2010]; root of context hierarchy
[INFO ][2010-05-05 22:05:00] Loading XML bean definitions from class path resource [beans-test.xml]
[INFO ][2010-05-05 22:05:01] Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@d9660d]: org.springframework.beans.factory.support.DefaultListableBeanFactory@186d484
[INFO ][2010-05-05 22:05:01] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@186d484: defining beans [sessionFactory,transactionManager,txAdvice,org.springframework.aop.config.internalAutoProxyCreator,allDaoManager,org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0,placardDAO,statementDAO,gossipDAO,itemDAO,albumDAO,blogDAO,userDAO,pictureDAO,replyDAO,friendsDAO,adminDAO,userDaoManager,albumDaoManager]; root of factory hierarchy
[INFO ][2010-05-05 22:05:02] Hibernate 3.2.7
[INFO ][2010-05-05 22:05:02] hibernate.properties not found
[INFO ][2010-05-05 22:05:02] Bytecode provider name : cglib
[INFO ][2010-05-05 22:05:02] using JDK 1.4 java.sql.Timestamp handling
[INFO ][2010-05-05 22:05:02] configuring from url: file:/E:/workspaces/MyEclipse8Workspace/WebProject/WebRoot/WEB-INF/classes/hibernate.cfg.xml
[INFO ][2010-05-05 22:05:02] Reading mappings from resource : com/goodfriend/model/Placard.hbm.xml
[INFO ][2010-05-05 22:05:02] Mapping class: com.goodfriend.model.Placard -> placard
[INFO ][2010-05-05 22:05:02] Reading mappings from resource : com/goodfriend/model/Statement.hbm.xml
[INFO ][2010-05-05 22:05:02] Mapping class: com.goodfriend.model.Statement -> statement
[INFO ][2010-05-05 22:05:02] Reading mappings from resource : com/goodfriend/model/Gossip.hbm.xml
[INFO ][2010-05-05 22:05:02] Mapping class: com.goodfriend.model.Gossip -> gossip
[INFO ][2010-05-05 22:05:02] Reading mappings from resource : com/goodfriend/model/Item.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Item -> item
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/Album.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Album -> album
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/Blog.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Blog -> blog
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/User.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.User -> user
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/Picture.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Picture -> picture
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/Reply.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Reply -> reply
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/Friends.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Friends -> friends
[INFO ][2010-05-05 22:05:03] Reading mappings from resource : com/goodfriend/model/Admin.hbm.xml
[INFO ][2010-05-05 22:05:03] Mapping class: com.goodfriend.model.Admin -> admin
[INFO ][2010-05-05 22:05:03] Configured SessionFactory: null
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Item.gossips -> gossip
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Item.pictures -> picture
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Item.statements -> statement
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Item.blogs -> blog
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Item.replies -> reply
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Item.albums -> album
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.Album.pictures -> picture
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.User.items -> item
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.User.friends -> friends
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.User.replies -> reply
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.User.friendsForOther -> friends
[INFO ][2010-05-05 22:05:03] Mapping collection: com.goodfriend.model.User.gossips -> gossip
[INFO ][2010-05-05 22:05:03] Building new Hibernate SessionFactory
[INFO ][2010-05-05 22:05:03] Using Hibernate built-in connection pool (not for production use!)
[INFO ][2010-05-05 22:05:03] Hibernate connection pool size: 20
[INFO ][2010-05-05 22:05:03] autocommit mode: false
[INFO ][2010-05-05 22:05:03] using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost:3306/goodfriend
[INFO ][2010-05-05 22:05:03] connection properties: {user=root, password=****}
[INFO ][2010-05-05 22:05:03] RDBMS: MySQL, version: 5.0.67-community-nt
[INFO ][2010-05-05 22:05:03] JDBC driver: MySQL-AB JDBC Driver, version: mysql-connector-java-5.0.8 ( Revision: ${svn.Revision} )
[INFO ][2010-05-05 22:05:03] Using dialect: org.hibernate.dialect.MySQLDialect
[INFO ][2010-05-05 22:05:03] Transaction strategy: org.springframework.orm.hibernate3.SpringTransactionFactory
[INFO ][2010-05-05 22:05:03] No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[INFO ][2010-05-05 22:05:03] Automatic flush during beforeCompletion(): disabled
[INFO ][2010-05-05 22:05:03] Automatic session close at end of transaction: disabled
[INFO ][2010-05-05 22:05:03] JDBC batch size: 15
[INFO ][2010-05-05 22:05:03] JDBC batch updates for versioned data: disabled
[INFO ][2010-05-05 22:05:03] Scrollable result sets: enabled
[INFO ][2010-05-05 22:05:03] JDBC3 getGeneratedKeys(): enabled
[INFO ][2010-05-05 22:05:03] Connection release mode: auto
[INFO ][2010-05-05 22:05:03] Maximum outer join fetch depth: 2
[INFO ][2010-05-05 22:05:03] Default batch fetch size: 1
[INFO ][2010-05-05 22:05:03] Generate SQL with comments: disabled
[INFO ][2010-05-05 22:05:03] Order SQL updates by primary key: disabled
[INFO ][2010-05-05 22:05:03] Order SQL inserts for batching: disabled
[INFO ][2010-05-05 22:05:03] Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[INFO ][2010-05-05 22:05:03] Using ASTQueryTranslatorFactory
[INFO ][2010-05-05 22:05:03] Query language substitutions: {}
[INFO ][2010-05-05 22:05:03] JPA-QL strict compliance: disabled
[INFO ][2010-05-05 22:05:03] Second-level cache: enabled
[INFO ][2010-05-05 22:05:03] Query cache: disabled
[INFO ][2010-05-05 22:05:03] Cache provider: org.hibernate.cache.NoCacheProvider
[INFO ][2010-05-05 22:05:03] Optimize cache for minimal puts: disabled
[INFO ][2010-05-05 22:05:03] Structured second-level cache entries: disabled
[INFO ][2010-05-05 22:05:03] Echoing all SQL to stdout
[INFO ][2010-05-05 22:05:03] Statistics: disabled
[INFO ][2010-05-05 22:05:03] Deleted entity synthetic identifier rollback: disabled
[INFO ][2010-05-05 22:05:03] Default entity-mode: pojo
[INFO ][2010-05-05 22:05:03] Named query checking : enabled
[INFO ][2010-05-05 22:05:04] building session factory
[INFO ][2010-05-05 22:05:05] Not binding factory to JNDI, no JNDI name configured
